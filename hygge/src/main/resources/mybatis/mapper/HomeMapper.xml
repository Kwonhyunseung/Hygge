<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.HomeMapper">

	<!-- 카테고리 -->
	<select id="subListCategory" parameterType="long" resultType="com.sp.app.model.Category">
		SELECT category_num, parent_num, name
		FROM category
		WHERE parent_num = #{parent_num}
		ORDER BY category_num ASC
	</select>

	<!-- 신규 (시작일~일주일동안) -->
	<select id="listNewProjects" parameterType="map" resultType="com.sp.app.model.Funding">
		SELECT p.num, pr.accept_date, p.start_date, p.end_date, pr.title,
			p.block, pr.thumbnail,
			ROUND(NVL(total_sales.total_amount, 0) / pr.target * 100, 2) AS funding_goal,
			1 AS isNew,
			(SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) AS mainLike,
			<choose>
				<when test="memberIdx != null">
					(CASE WHEN EXISTS (
						SELECT 1 FROM ProjectLike
						WHERE num = p.num AND memberIdx = #{memberIdx}
					) THEN 1 ELSE 0 END)
				</when>
				<otherwise>
					0
				</otherwise>
			</choose>
			AS userLiked
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		LEFT JOIN (
			SELECT pd.num, SUM(s.sum) AS total_amount
			FROM product pd
			LEFT JOIN sales s ON pd.product_num = s.product_num
			GROUP BY pd.num
		) total_sales ON p.num = total_sales.num
		WHERE p.block = 0 AND SYSDATE BETWEEN p.start_date AND p.end_date
		ORDER BY pr.accept_date DESC
		FETCH FIRST 6 ROWS ONLY
	</select>

	<!-- 인기 (좋아요순), 마감임박 제외, 시작일~1일뒤 -->
	<select id="listPopularProjects" parameterType="map"
		resultType="com.sp.app.model.Funding">
		SELECT p.num, p.block, pr.thumbnail, pr.title, pr.accept_date,
			pr.target, p.end_date,
			NVL(total_sales.total_amount, 0) AS total_amount,
			ROUND(NVL(total_sales.total_amount, 0) / pr.target * 100, 2) AS funding_goal,
			1 AS isPopular,
			(SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) AS mainLike,
			<choose>
				<when test="memberIdx != null">
					(CASE WHEN EXISTS (
						SELECT 1 FROM ProjectLike
						WHERE num = p.num AND memberIdx = #{memberIdx}
					) THEN 1 ELSE 0 END)
				</when>
				<otherwise>
					0
				</otherwise>
			</choose>
			AS userLiked
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		JOIN (
			SELECT pd.num, SUM(s.sum) AS total_amount
			FROM product pd
			LEFT JOIN sales s ON pd.product_num = s.product_num
			GROUP BY pd.num
		) total_sales ON p.num = total_sales.num
		WHERE pr.accept_return = 1 AND p.block = 0
			AND SYSDATE >= p.start_date
			AND p.end_date > SYSDATE
			AND (p.end_date - SYSDATE > 3 AND ROUND(NVL(total_sales.total_amount, 0) / pr.target * 100, 2) &lt; 85)
		    AND (SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) > 0
		ORDER BY
		    (SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) *
		    (1 + (14 - LEAST(14, SYSDATE - (pr.accept_date + 7))) / 14) DESC
		FETCH FIRST 4 ROWS ONLY
		<!-- 팔린 금액 순
		SELECT p.num, p.block, pr.thumbnail, pr.title, pr.accept_date,
			pr.target, p.end_date,
			NVL(total_sales.total_amount, 0) AS total_amount,
			ROUND(NVL(total_sales.total_amount, 0) / pr.target * 100, 2) AS funding_goal,
			1 AS isPopular,
			(SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) AS mainLike,
			<choose>
				<when test="memberIdx != null">
					(CASE WHEN EXISTS (
						SELECT 1 FROM ProjectLike
						WHERE num = p.num AND memberIdx = #{memberIdx}
					) THEN 1 ELSE 0 END)
				</when>
				<otherwise>
					0
				</otherwise>
			</choose>
			AS userLiked
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		JOIN (
			SELECT pd.num, SUM(s.sum) AS total_amount
			FROM product pd
			LEFT JOIN sales s ON pd.product_num = s.product_num
			GROUP BY pd.num
		) total_sales ON p.num = total_sales.num
		WHERE pr.accept_return = 1 AND p.block = 0
			AND SYSDATE >= p.start_date
			AND p.end_date > SYSDATE
		// ORDER BY total_sales.total_amount DESC
		ORDER BY
			total_sales.total_amount *
			(1 + (14 - LEAST(14, SYSDATE - (p.start_date))) / 14) DESC
		FETCH FIRST 4 ROWS ONLY -->
	</select>

	<!-- 공개 예정 (승인일부터 일주일까지) -->
	<select id="listComingProjects" parameterType="map" resultType="com.sp.app.model.Funding">
		SELECT p.num, pr.accept_date, pr.title, pr.thumbnail,
			p.block,
			CEIL(p.start_date - SYSDATE) AS remained_date,
			1 AS isComing
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		WHERE pr.accept_return = 1 AND p.block = 0
			AND SYSDATE BETWEEN p.start_date - 7 AND p.start_date
		ORDER BY p.start_date ASC
		FETCH FIRST 4 ROWS ONLY
	</select>

	<!-- 마감 임박 (마감일 3일전 또는 펀딩률 85% 이상) -->
	<select id="listDeadlineProjects" parameterType="map" resultType="com.sp.app.model.Funding">
		SELECT p.num, pr.accept_date, TO_CHAR(p.end_date, 'YYYY.MM.DD') AS end_date,
			pr.title, pr.target, pr.thumbnail, p.block,
			NVL(total_sales.total_amount, 0) AS total_amount,
			ROUND(NVL(total_sales.total_amount, 0) / pr.target * 100, 2) AS funding_goal,
			1 AS isDeadline,
			(SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) AS mainLike,
			<choose>
				<when test="memberIdx != null">
					(CASE WHEN EXISTS (
						SELECT 1 FROM ProjectLike
						WHERE num = p.num AND memberIdx = #{memberIdx}
					) THEN 1 ELSE 0 END)
				</when>
				<otherwise>
					0
				</otherwise>
			</choose>
			AS userLiked
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		LEFT JOIN (
			SELECT pd.num, SUM(s.sum) AS total_amount
			FROM product pd
			LEFT JOIN sales s ON pd.product_num = s.product_num
			GROUP BY pd.num
		) total_sales ON p.num = total_sales.num
		WHERE p.block = 0 AND SYSDATE >= p.start_date
			AND p.end_date > SYSDATE
			AND (
				(p.end_date - SYSDATE &lt;= 3)
				OR
				(NVL(total_sales.total_amount, 0) / pr.target * 100 > 85)
			)
			AND ROUND(NVL(total_sales.total_amount, 0) / pr.target * 100, 2) &lt; 100
		ORDER BY p.end_date ASC
		FETCH FIRST 4 ROWS ONLY
	</select>

	<!-- 실시간 랭킹 (판매금액 순) -->
	<select id="listRankingProjects" parameterType="map" resultType="com.sp.app.model.Funding">
		SELECT NVL(total_sales.total_amount, 0) AS total_amount,
			p.start_date, pr.title, pr.thumbnail, p.block,
			1 AS isRanking
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		JOIN (
			SELECT pd.num, SUM(s.sum) AS total_amount
			FROM product pd
			LEFT JOIN sales s ON pd.product_num = s.product_num
			GROUP BY pd.num
		) total_sales ON p.num = total_sales.num
		WHERE p.block = 0
			AND SYSDATE >= p.start_date
			AND p.end_date > SYSDATE
			AND NVL(total_sales.total_amount, 0) > 0
		ORDER BY
		CASE
			WHEN (SYSDATE - p.start_date) &lt; 7 THEN total_sales.total_amount * 1.5
			WHEN (SYSDATE - p.start_date) &lt; 14 THEN total_sales.total_amount * 1.2
			ELSE total_sales.total_amount
		END DESC
		FETCH FIRST 7 ROWS ONLY
		<!-- 좋아요순
		SELECT p.num, (SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) AS likeCount,
			p.start_date, pr.title, pr.thumbnail, p.block,
			1 AS isRanking
		FROM Project p
		JOIN ProjectRequest pr ON p.num = pr.num
		WHERE p.block = 0 AND SYSDATE >= p.start_date AND p.end_date > SYSDATE
		// ORDER BY (SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) DESC
		ORDER BY
			(SELECT COUNT(*) FROM ProjectLike WHERE num = p.num) *
			(1 + (14 - LEAST(14, SYSDATE - (p.start_date))) / 14) DESC
		FETCH FIRST 7 ROWS ONLY -->
	</select>

</mapper>