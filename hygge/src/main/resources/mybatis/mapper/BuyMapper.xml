<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.BuyMapper">

	<!-- 결제창 상품리스트 : 가격, 상품명, 상세정보, 원산지, 배송일정, 배송비 -->
	<select id="productList" parameterType="map" resultType="com.sp.app.model.Product">
		SELECT DISTINCT p.product_num, p.price, p.title, p.detail, p.stock, p.origin, p.num,
		    pr.delivery_info, pr.delivery_fee
	    FROM product p
	    JOIN projectRequest pr ON p.num = pr.num
	    WHERE p.num = #{num}
	</select>
	
	<!-- 결제창 상품선택 --> 
	<!-- <select id="findByProductNum" parameterType="Long" resultType="com.sp.app.model.Product">
		SELECT p.product_num, p.price, p.title, p.detail, p.stock, p.num,
			pr.delivery_info, pr.delivery_fee
FROM product p
JOIN projectRequest pr ON p.num = pr.num
WHERE p.product_num = #{product_num}
	</select> -->

	<!-- 결제할 상품 정보 -->
	<select id="buyProductInfo" parameterType="Long" resultType="com.sp.app.model.Product">
		<!-- 썸네일, 상품명, 상품구성, 구매수량, 구매금액, 배송비, 가격 -->
		SELECT p.product_num, p.num, pr.thumbnail, p.title, p.detail, p.price, pr.delivery_fee
		FROM Product p
		JOIN ProjectRequest pr ON p.num = pr.num
		WHERE p.product_num = #{product_num}
	</select>
	
	<!-- 서포터 정보 -->
	<select id="buyUserInfo" parameterType="Long" resultType="com.sp.app.model.Member">
		<!-- 이름, 이메일, 번호1,2,3, 주소1,2, 우편번호 -->
		SELECT m.memberIdx, name, email1, email2, tel1, tel2, tel3, addr1, addr2, postCode 
		FROM Member1 m
		JOIN Member2 m2 ON m.memberIdx = m2.memberIdx
		WHERE m.memberIdx = #{memberIdx}
	</select>

	<!-- 배송지 등록(신규 배송지일 경우) -->
	<insert id="insertBuyDelivery" parameterType="com.sp.app.model.DeliveryList">
		<!-- default_dest -> 기본:0, 나머지(신규, 등):1 -->
		INSERT INTO DeliveryList (dest_num, memberIdx, addr1, addr2, postCode, receiver, default_dest, request)
			VALUES (DELIVERY_SEQ.NEXTVAL, #{memberIdx}, #{addr1}, #{addr2}, #{postCode}, 1, #{request})
	</insert>
	
	<!-- 구매내역 등록 -->
	<insert id="insertBuySales" parameterType="com.sp.app.model.Sales">
INSERT INTO Sales (num, product_num, amount, sum, payment_num)
VALUES (SALES_SEQ.NEXTVAL, #{product_num}, #{amount}, #{sum}, #{payment_num})
</insert>
	
	
	<!-- 결제내역 등록 --> 
	<insert id="insertBuyPayment" parameterType="com.sp.app.model.Payment">
		<!-- pay_way -> 카드:1 -->
		INSERT INTO Payment (payment_num, memberIdx, total_amount, pay_amount, pay_way, sort, shipping_fee, coupon, payment_date, shipping_state)
			VALUES (PAYMENT_SEQ.NEXTVAL, #{memberIdx}, #{total_amount}, #{pay_amount}, #{pay_way}, #{sort}, #{shipping_fee}, #{coupon}, SYSDATE, #{shipping_state})
	</insert>
	
	<!-- 사용 가능한 쿠폰 리스트 -->
	<select id="listCoupon" parameterType="Long" resultType="com.sp.app.model.Coupon">
		<!-- 쿠폰명, 만기일, 할인율, 할인최대금액 -->
		SELECT c.num, memberIdx, discount_rate, discount, title, exp_date
		FROM Coupon c
		JOIN Event e ON c.num = e.num
		WHERE memberIdx = #{memberIdx} AND used_date IS NULL
		ORDER BY exp_date DESC
	</select>

	<update id="updateCoupon" parameterType="com.sp.app.model.Coupon">
	    UPDATE Coupon
	    SET USED_DATE = SYSDATE
	    WHERE num = #{num} AND memberIdx = #{memberIdx} AND USED_DATE IS NULL
	</update>
	
	<!-- 판매 개수에 따른 재고 감소 -->
	<update id="updateStock" parameterType="com.sp.app.model.Product">
	    UPDATE Product 
	    SET stock = stock - #{amount}
	    WHERE product_num = #{product_num}
	    AND stock >= #{amount}
	</update>
	
</mapper>